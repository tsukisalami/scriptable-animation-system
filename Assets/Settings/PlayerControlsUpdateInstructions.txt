Instructions for adding BuildMode actions to PlayerControls:

1. Open your PlayerControls input actions asset in Unity (the actual asset, not the generated C# file)

2. Add a new action under your "Gameplay" action map:
   - Name: "ToggleBuild"
   - Action Type: Button
   - Interactions: Hold (add this in the properties panel)
   - Control Type: Button

3. Add a binding for the action:
   - Path: <Keyboard>/t
   - You might want to also add a gamepad binding like <Gamepad>/dpad/up if you support gamepad controls

4. Save the asset, and Unity will regenerate the PlayerControls.cs file with the new action

5. Update your Player GameObject:
   - Add the BuildSystem component to your player
   - Connect the RadialMenu to the BuildSystem 
   - Set up the BuildSystem component:
     - Add your radial menu (under GameplayHUD) to the "Build Menu" field
     - Add your InventoryEvents scriptable object reference
     - Assign the building prefabs (Radio, FOB, AmmoCrate)
     - Create a material using the HologramPreview shader and assign it

6. In each RadialMenuElement in your radial menu:
   - Set the BuildingType enum to the appropriate type (Radio, FOB, AmmoCrate)
   - Make sure the label is set appropriately

7. Open your input event handler script (the one that implements IGameplayActions interface) and add the handler:

```csharp
public void OnToggleBuild(InputAction.CallbackContext context)
{
    // This will automatically forward to your BuildSystem.ToggleBuild method
}
```

8. If the above doesn't work, try this alternative implementation:

```csharp
public void OnToggleBuild(InputAction.CallbackContext context)
{
    // Get reference to BuildSystem
    var buildSystem = GetComponent<BuildSystem>();
    if (buildSystem != null)
    {
        buildSystem.ToggleBuild(context);
    }
}
```

9. Delete the separate BuildActions.inputactions file and PlayerBuildActions.cs as they're no longer needed

10. Make sure the action reference is connected in the Unity Editor's Inspector panel for your player object. 